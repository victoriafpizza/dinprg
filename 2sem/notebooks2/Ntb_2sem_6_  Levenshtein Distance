{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1y9BifKcuHa9JzhnSmnPxz3Nrqmya0-W9","timestamp":1723301327989},{"file_id":"1eVVxjcmAat5kvPMX_CGCWliGnBO54Xmc","timestamp":1723299988628},{"file_id":"1fO92PH82zzyqqXzx1pv3Ztv7Tj2KwB_T","timestamp":1723297490194},{"file_id":"1y0XCnbAaBzvfKqb8jLNm2Mb6bDkTdEfG","timestamp":1722802271865},{"file_id":"1f_BYcC1XYhPHPL_MBca7RtEYHPwXWuST","timestamp":1722800179157},{"file_id":"1K6-qRUjfIN_2t2i04u8hmbKpV7Q1JYTz","timestamp":1722798404750},{"file_id":"13eU1xLcOm_mIpUIwwkrg7VZlTTDw2L15","timestamp":1715566364408},{"file_id":"1M7dHLGYkTgh0yWRVvnr-iwLuSbQsrOgi","timestamp":1715038817797},{"file_id":"1qD36qYTLJ7m3gCe_ZOvfmv_-27IRZZIV","timestamp":1715037070990},{"file_id":"1nFeofhYiGOzlVPuKXIrBeAVZJfqproor","timestamp":1714825513349},{"file_id":"1N6B4Xu6vPa5arrCoCjRcSu-Aq_tqFcNq","timestamp":1714822914713},{"file_id":"1PlJQrgGH0Gt7dpARVkpUOPA0ITkNOb7Y","timestamp":1714820977633},{"file_id":"1F8tpmplHK0hFiKuUeeAeqnGnkJgY1jGQ","timestamp":1714349764697},{"file_id":"1nhMxaW7HbesLBacHoDtKwlBTct5ypga1","timestamp":1714347993508},{"file_id":"1_im2he2b1isPyvgVNnODtNUDWpSIIgIn","timestamp":1714054274868},{"file_id":"1nvYsaXOFLMeoDSxH9cJ5rke2zfRbwplG","timestamp":1713830067191},{"file_id":"1BtxETk7WPBi71SfjQfZRUpLXhGgCEZUP","timestamp":1713828030830},{"file_id":"108JSGXWV1tN3BLQefPIT3BxC73ubrds5","timestamp":1713550868926}],"authorship_tag":"ABX9TyNZPqZzdNVCVH9GrlQUjo1e"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#### The Edit Distance, also known as the Levenshtein Distance, measures the similarity between two strings by calculating the minimum number of operations required to transform one series into another."],"metadata":{"id":"0lP4_UI4xIHU"}},{"cell_type":"markdown","source":["#### The goal is to find the minimum number of operations needed to equal two strings. Some applications:"],"metadata":{"id":"yz9yn5gXxq-r"}},{"cell_type":"markdown","source":["##### **** DNA Sequencing: In bioinformatics, align and compare DNA or RNA sequences -- genetic analysis and identifying mutations."],"metadata":{"id":"LmFO5_tgyW8e"}},{"cell_type":"markdown","source":["##### **** Natural Language Processing: string similarity and text comparison, such as identifying similar documents."],"metadata":{"id":"Z49T5dpbyoKF"}},{"cell_type":"markdown","source":["##### **** Machine Translation: improve machine translation systems -- most similar translation in the target language."],"metadata":{"id":"RWwyCrYqyy26"}},{"cell_type":"code","source":["def edit_distance(word1, word2):\n","  \"\"\"\n","    Args:\n","      word1: string input\n","      word2: string input\n","    Returns:\n","    number of operations to make the inputs equal\n","    \"\"\"\n","  m, n = len(word1), len(word2)\n","  dp = [[0] * (n + 1) for _ in range(m + 1)]\n","\n","  # Initialize base cases\n","  for i in range(m + 1):\n","      for j in range(n + 1):\n","          if i == 0:\n","              dp[i][j] = j\n","          elif j == 0:\n","              dp[i][j] = i\n","          elif word1[i - 1] == word2[j - 1]:\n","              dp[i][j] = dp[i - 1][j - 1]\n","          else:\n","              dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n","\n","  return dp[m][n]\n"],"metadata":{"id":"Or_5bfrL3vQF","executionInfo":{"status":"ok","timestamp":1723303676659,"user_tz":180,"elapsed":328,"user":{"displayName":"Andre Marques","userId":"13386997495052440502"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["# Example usage:\n","word1 = \"Maria\"\n","word2 = \"Maria\"\n","print(edit_distance(word1, word2))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"q-n26hNu343n","executionInfo":{"status":"ok","timestamp":1723303733467,"user_tz":180,"elapsed":335,"user":{"displayName":"Andre Marques","userId":"13386997495052440502"}},"outputId":"9e49dd3c-e4d3-435f-c2d0-a398a0068f85"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["0\n"]}]},{"cell_type":"code","source":["# Example usage:\n","word1 = \"Mario\"\n","word2 = \"Maria\"\n","print(edit_distance(word1, word2))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IV8_UKCH59CK","executionInfo":{"status":"ok","timestamp":1723303737794,"user_tz":180,"elapsed":318,"user":{"displayName":"Andre Marques","userId":"13386997495052440502"}},"outputId":"37e8561b-ade2-4639-8a2d-2db29ac4d68b"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["1\n"]}]},{"cell_type":"code","source":["# Example usage:\n","word1 = \"Marinalva\"\n","word2 = \"Maria\"\n","print(edit_distance(word1, word2))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dyKDgRXB5_KG","executionInfo":{"status":"ok","timestamp":1723303745251,"user_tz":180,"elapsed":427,"user":{"displayName":"Andre Marques","userId":"13386997495052440502"}},"outputId":"43060635-d265-4736-d0e1-a61eb3bbcd8e"},"execution_count":34,"outputs":[{"output_type":"stream","name":"stdout","text":["4\n"]}]},{"cell_type":"code","source":["# Example usage:\n","word1 = \"Dinalda\"\n","word2 = \"Maria\"\n","print(edit_distance(word1, word2))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ioIZrG7K6JdA","executionInfo":{"status":"ok","timestamp":1723303778416,"user_tz":180,"elapsed":351,"user":{"displayName":"Andre Marques","userId":"13386997495052440502"}},"outputId":"4f781f49-15a7-4205-8960-718400ad7163"},"execution_count":35,"outputs":[{"output_type":"stream","name":"stdout","text":["5\n"]}]},{"cell_type":"code","source":["def lvhrecs(word1, word2):\n","  \"\"\" Arguments: word1 & word2 = inputs\"\"\"\n","  m = len(word1)\n","  n = len(word2)\n","    # word1 is empty\n","  if m == 0:\n","      return n\n","  # word2 is empty\n","  if n == 0:\n","      return m\n","  if word1[m - 1] == word2[n - 1]:\n","      return lvhrecs(word1, word2, m - 1, n - 1)\n","  return 1 + min(\n","        # Insert\n","      lvhrecs(word1, word2, m, n - 1),\n","      min(\n","        # Remove\n","          lvhrecs(word1, word2, m - 1, n),\n","        # Replace\n","          lvhrecs(word1, word2, m - 1, n - 1))\n","  )"],"metadata":{"id":"jJTsYTkx68Ac","executionInfo":{"status":"ok","timestamp":1723304486938,"user_tz":180,"elapsed":347,"user":{"displayName":"Andre Marques","userId":"13386997495052440502"}}},"execution_count":40,"outputs":[]},{"source":["def lvhrecs(word1, word2):\n","  \"\"\" Arguments: word1 & word2 = inputs\"\"\"\n","  m = len(word1)\n","  n = len(word2)\n","    # word1 is empty\n","  if m == 0:\n","      return n\n","  # word2 is empty\n","  if n == 0:\n","      return m\n","  if word1[m - 1] == word2[n - 1]:\n","      return lvhrecs(word1[:m-1], word2[:n-1]) # Pass sliced strings as arguments\n","  return 1 + min(\n","        # Insert\n","      lvhrecs(word1, word2[:n-1]), # Pass sliced strings as arguments\n","      min(\n","        # Remove\n","          lvhrecs(word1[:m-1], word2), # Pass sliced strings as arguments\n","        # Replace\n","          lvhrecs(word1[:m-1], word2[:n-1])) # Pass sliced strings as arguments\n","  )"],"cell_type":"code","metadata":{"id":"CDTxPamP9PjG","executionInfo":{"status":"ok","timestamp":1723304596714,"user_tz":180,"elapsed":388,"user":{"displayName":"Andre Marques","userId":"13386997495052440502"}}},"execution_count":42,"outputs":[]},{"cell_type":"code","source":["# Example usage:\n","word1 = \"Dinalda\"\n","word2 = \"Maria\"\n","print(lvhrecs(word1=word1,word2=word2))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c_qtTrNs8rXZ","executionInfo":{"status":"ok","timestamp":1723304619413,"user_tz":180,"elapsed":362,"user":{"displayName":"Andre Marques","userId":"13386997495052440502"}},"outputId":"b75b34ad-2217-4ecf-e136-08a50dc19f78"},"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["5\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"dPKExVxD8uXg"},"execution_count":null,"outputs":[]}]}